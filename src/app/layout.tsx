"use client"

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import "../css/style.css";
import { WalletContextProvider } from '../contexts/ContextProvider'
import { ContextProvider } from "@/contexts/ContextProvider";
import { WalletAdapterNetwork, WalletError } from '@solana/wallet-adapter-base';
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
import { WalletModalProvider as ReactUIWalletModalProvider } from '@solana/wallet-adapter-react-ui';
import {
  PhantomWalletAdapter,
  SolflareWalletAdapter,
  TorusWalletAdapter,
} from '@solana/wallet-adapter-wallets';
import { clusterApiUrl } from '@solana/web3.js';
import { FC, ReactNode, useCallback, useMemo } from 'react';
import { AutoConnectProvider, useAutoConnect } from '../../src/contexts/AutoConnectProvider';
import { notify } from "../util/notifications";

const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// const WalletContextProvider: FC<{ children: ReactNode }> = ({ children }) => {
//   const { autoConnect } = useAutoConnect();

//   var network = WalletAdapterNetwork.Devnet;

//   const endpoint = useMemo(() => clusterApiUrl(network), [network]);

//   const wallets = useMemo(
//     () => [
//       //  new PhantomWalletAdapter(),
//       new SolflareWalletAdapter(),
//       new TorusWalletAdapter(),
//     ],
//     [network]
//   );

//   const onError = useCallback(
//     (error: WalletError) => {
//       notify({ type: 'error', message: error.message ? `${error.name}: ${error.message}` : error.name });
//       console.error(error);
//     },
//     []
//   );

//   return (
//     // TODO: updates needed for updating and referencing endpoint: wallet adapter rework
//     <ConnectionProvider endpoint={endpoint}>
//       <WalletProvider wallets={wallets} onError={onError} autoConnect={autoConnect}>
//         <ReactUIWalletModalProvider>{children}</ReactUIWalletModalProvider>
//       </WalletProvider>
//     </ConnectionProvider>
//   );
// };




export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      {/* <ContextProvider> */}
      <AutoConnectProvider>
        <WalletContextProvider>
          <body className={inter.className}>
            {children}
          </body>
        </WalletContextProvider>
      </AutoConnectProvider>

      {/* </ContextProvider> */}
    </html>
  );
}
